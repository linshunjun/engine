// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.

#include <cc-shadow>
#include <packing>

// When screenSpaceSingY and clipSpaceSignY have different signs, need to flip the uv
#define CC_HANDLE_NDC_SAMPLE_FLIP(uv) uv = cc_cameraPos.w == 1.0 ? vec2(uv.x, 1.0 - uv.y) : uv

#if CC_RECEIVE_SHADOW
  #pragma builtin(global)
  layout(set = 0, binding = 3) uniform sampler2D cc_shadowMap;

  #pragma builtin(global)
  layout(set = 0, binding = 5) uniform sampler2D cc_spotLightingMap;

  float CCGetLinearDepth (vec3 worldPos) {
    vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);
    float dist = length(viewStartPos.xyz);
    return cc_shadowNFLSInfo.x + (-dist / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x));
  }

  float CCGetShadowFactorX1 (vec4 shadowPos) {
    vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;
    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||
        clipPos.y < 0.0 || clipPos.y > 1.0 ||
        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }

    float shadow = 0.0;
    float closestDepth = 0.0;
    CC_HANDLE_NDC_SAMPLE_FLIP(clipPos.xy);
    if (cc_shadowLPNNInfo.y > 0.000001) {
      closestDepth = unpackRGBAToDepth(texture(cc_shadowMap, clipPos.xy));
    } else {
      closestDepth = texture(cc_shadowMap, clipPos.xy).x;
    }

    shadow = step(closestDepth, clipPos.z- cc_shadowWHPBInfo.w);

    return shadow;
  }

  float CCGetShadowFactorX5 (vec4 shadowPos) {
    vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;
    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||
        clipPos.y < 0.0 || clipPos.y > 1.0 ||
        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }

    float offsetx = 1.0 / cc_shadowWHPBInfo.x;
    float offsety = 1.0 / cc_shadowWHPBInfo.y;
    float shadow = 0.0;
    CC_HANDLE_NDC_SAMPLE_FLIP(clipPos.xy);
    if (cc_shadowLPNNInfo.y > 0.000001) {
      float closestDepth = unpackRGBAToDepth(texture(cc_shadowMap, vec2(clipPos.x - offsetx, clipPos.y - offsety)));
      shadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);
      closestDepth = unpackRGBAToDepth(texture(cc_shadowMap, vec2(clipPos.x - offsetx, clipPos.y + offsety)));
      shadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);
      closestDepth = unpackRGBAToDepth(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)));
      shadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);
      closestDepth = unpackRGBAToDepth(texture(cc_shadowMap, vec2(clipPos.x + offsetx, clipPos.y - offsety)));
      shadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);
      closestDepth = unpackRGBAToDepth(texture(cc_shadowMap, vec2(clipPos.x + offsetx, clipPos.y + offsety)));
      shadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);
    } else {
      float closestDepth = texture(cc_shadowMap, vec2(clipPos.x - offsetx, clipPos.y - offsety)).x;
      shadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);
      closestDepth = texture(cc_shadowMap, vec2(clipPos.x - offsetx, clipPos.y + offsety)).x;
      shadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);
      closestDepth = texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x;
      shadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);
      closestDepth = texture(cc_shadowMap, vec2(clipPos.x + offsetx, clipPos.y - offsety)).x;
      shadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);
      closestDepth = texture(cc_shadowMap, vec2(clipPos.x + offsetx, clipPos.y + offsety)).x;
      shadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);
    }

    return shadow / 5.0;
  }

  float CCGetShadowFactorX9 (vec4 shadowPos) {
    vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;
    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||
        clipPos.y < 0.0 || clipPos.y > 1.0 ||
        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }

    float offsetx = 1.0 / cc_shadowWHPBInfo.x;
    float offsety = 1.0 / cc_shadowWHPBInfo.y;
    float shadow = 0.0;
    float closestDepth = 0.0;
    CC_HANDLE_NDC_SAMPLE_FLIP(clipPos.xy);
    if (cc_shadowLPNNInfo.y > 0.000001) {
      for (int i = -1; i <= 1; i++) {
          for (int j = -1; j <= 1; j++) {
            float closestDepth = unpackRGBAToDepth(texture(cc_shadowMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)));
            shadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);
          }
      }
    } else {
      for (int i = -1; i <= 1; i++) {
          for (int j = -1; j <= 1; j++) {
            float closestDepth = texture(cc_shadowMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)).x;
            shadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);
          }
      }
    }


    return shadow / 9.0;
  }

  float CCGetShadowFactorX25 (vec4 shadowPos) {
    vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;
    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||
        clipPos.y < 0.0 || clipPos.y > 1.0 ||
        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }

    float offsetx = 1.0 / cc_shadowWHPBInfo.x;
    float offsety = 1.0 / cc_shadowWHPBInfo.y;
    float shadow = 0.0;
    CC_HANDLE_NDC_SAMPLE_FLIP(clipPos.xy);
    if (cc_shadowLPNNInfo.y > 0.000001) {
      for (int i = -2; i <= 2; i++) {
        for (int j = -2; j <= 2; j++) {
          float closestDepth = unpackRGBAToDepth(texture(cc_shadowMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)));
          shadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);
        }
      }
    } else {
      for (int i = -2; i <= 2; i++) {
        for (int j = -2; j <= 2; j++) {
          float closestDepth = texture(cc_shadowMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)).x;
          shadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);
        }
      }
    }

    return shadow / 25.0;
  }

  float CCGetDirLightShadowFactorX1 (vec4 shadowPos, vec3 worldPos) {
    vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;
    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||
        clipPos.y < 0.0 || clipPos.y > 1.0 ||
        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }

    float shadow = 0.0;
    float closestDepth = 0.0;
    float depth = 0.0;
    CC_HANDLE_NDC_SAMPLE_FLIP(clipPos.xy);  
    if (cc_shadowNFLSInfo.z > 0.000001) {
      depth = CCGetLinearDepth(worldPos);
    } else {
      depth = clipPos.z;
    }

    if (cc_shadowLPNNInfo.y > 0.000001) {
      closestDepth = unpackRGBAToDepth(texture(cc_spotLightingMap, clipPos.xy));
    } else {
      closestDepth = texture(cc_spotLightingMap, clipPos.xy).x;
    }
    shadow = step(closestDepth, depth - cc_shadowWHPBInfo.w);

    return shadow;
  }

  float CCGetDirLightShadowFactorX5 (vec4 shadowPos, vec3 worldPos) {
    vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;
    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||
        clipPos.y < 0.0 || clipPos.y > 1.0 ||
        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }

    float offsetx = 1.0 / cc_shadowWHPBInfo.x;
    float offsety = 1.0 / cc_shadowWHPBInfo.y;
    float shadow = 0.0;
    float depth = 0.0;

    // enbaled linear depth?
    if (cc_shadowNFLSInfo.z > 0.000001) {
      depth = CCGetLinearDepth(worldPos);
    } else {
      depth = clipPos.z;
    }
    CC_HANDLE_NDC_SAMPLE_FLIP(clipPos.xy);
    // enbaled packing?
    if (cc_shadowLPNNInfo.y > 0.000001) {
      float closestDepth = unpackRGBAToDepth(texture(cc_spotLightingMap, vec2(clipPos.x - offsetx, clipPos.y - offsety)));
      shadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);
      closestDepth = unpackRGBAToDepth(texture(cc_spotLightingMap, vec2(clipPos.x - offsetx, clipPos.y + offsety)));
      shadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);
      closestDepth = unpackRGBAToDepth(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)));
      shadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);
      closestDepth = unpackRGBAToDepth(texture(cc_spotLightingMap, vec2(clipPos.x + offsetx, clipPos.y - offsety)));
      shadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);
      closestDepth = unpackRGBAToDepth(texture(cc_spotLightingMap, vec2(clipPos.x + offsetx, clipPos.y + offsety)));
      shadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);
    } else {
      float closestDepth = texture(cc_spotLightingMap, vec2(clipPos.x - offsetx, clipPos.y - offsety)).x;
      shadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);
      closestDepth = texture(cc_spotLightingMap, vec2(clipPos.x - offsetx, clipPos.y + offsety)).x;
      shadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);
      closestDepth = texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x;
      shadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);
      closestDepth = texture(cc_spotLightingMap, vec2(clipPos.x + offsetx, clipPos.y - offsety)).x;
      shadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);
      closestDepth = texture(cc_spotLightingMap, vec2(clipPos.x + offsetx, clipPos.y + offsety)).x;
      shadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);
    }

    return shadow / 5.0;
  }

  float CCGetDirLightShadowFactorX9 (vec4 shadowPos, vec3 worldPos) {
    vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;
    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||
        clipPos.y < 0.0 || clipPos.y > 1.0 ||
        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }

    float offsetx = 1.0 / cc_shadowWHPBInfo.x;
    float offsety = 1.0 / cc_shadowWHPBInfo.y;
    float shadow = 0.0;
    float depth = 0.0;

    if (cc_shadowNFLSInfo.z > 0.000001) {
      depth = CCGetLinearDepth(worldPos);
    } else {
      depth = clipPos.z;
    }
    CC_HANDLE_NDC_SAMPLE_FLIP(clipPos.xy);
    if (cc_shadowLPNNInfo.y > 0.000001) {
      for (int i = -1; i <= 1; i++) {
        for (int j = -1; j <= 1; j++) {
          float closestDepth = unpackRGBAToDepth(texture(cc_spotLightingMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)));
          shadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);
        }
      }
    } else {
      for (int i = -1; i <= 1; i++) {
        for (int j = -1; j <= 1; j++) {
          float closestDepth = texture(cc_spotLightingMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)).x;
          shadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);
        }
      }
    }

    return shadow / 9.0;
  }

  float CCGetDirLightShadowFactorX25 (vec4 shadowPos, vec3 worldPos) {
    vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;
    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||
        clipPos.y < 0.0 || clipPos.y > 1.0 ||
        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }

    float offsetx = 1.0 / cc_shadowWHPBInfo.x;
    float offsety = 1.0 / cc_shadowWHPBInfo.y;
    float depth = 0.0;
    float shadow = 0.0;

    if (cc_shadowNFLSInfo.z > 0.000001) {
      depth = CCGetLinearDepth(worldPos);
    } else {
      depth = clipPos.z;
    }
    CC_HANDLE_NDC_SAMPLE_FLIP(clipPos.xy);
    if (cc_shadowLPNNInfo.y > 0.000001) {
      for (int i = -2; i <= 2; i++) {
        for (int j = -2; j <= 2; j++) {
          float closestDepth = unpackRGBAToDepth(texture(cc_spotLightingMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)));
          shadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);
        }
      }
    } else {
      for (int i = -2; i <= 2; i++) {
        for (int j = -2; j <= 2; j++) {
          float closestDepth = texture(cc_spotLightingMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)).x;
          shadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);
        }
      }
    }

    return shadow / 25.0;
  }
#endif

#define CC_DIR_SHADOW_FACTOR_BASE(finalColor, shadowPos, worldPos, lightPos, normal)                \
{                                                                                                   \
  float pcf = cc_shadowWHPBInfo.z + 0.001;                                                          \
  float shadowAttenuation = 0.0;                                                                    \
  float cosAngle = clamp(1.0 - dot(normal, normalize(lightPos.xyz - worldPos.xyz)), 0.0, 1.0);      \
  vec3 projWorldPos = shadowPos.xyz + cosAngle * cc_shadowLPNNInfo.z * normal;                      \
  vec4 pos = vec4(projWorldPos.xyz, shadowPos.w);                                                   \
  if (pcf > 3.0) shadowAttenuation = CCGetDirLightShadowFactorX25(pos, worldPos);                   \
  else if (pcf > 2.0) shadowAttenuation = CCGetDirLightShadowFactorX9(pos, worldPos);               \
  else if (pcf > 1.0) shadowAttenuation = CCGetDirLightShadowFactorX5(pos, worldPos);               \
  else shadowAttenuation = CCGetDirLightShadowFactorX1(pos, worldPos);                              \
  finalColor *= 1.0 - shadowAttenuation;                                                            \
}                                                                                                   \
#pragma // empty pragma trick to get rid of trailing semicolons at effect compile time

#define CC_SHADOW_FACTOR_BASE(finalColor, atten, shadowPos, lightDir, normal)                                               \
{                                                                                                                           \
  float pcf = cc_shadowWHPBInfo.z + 0.001;                                                                                  \
  float shadowAttenuation = 0.0;                                                                                            \
  float cosAngle = clamp(1.0 - dot(normal, lightDir.xyz), 0.0, 1.0);                                                            \
  vec3 projWorldPos = shadowPos.xyz + cosAngle * cc_shadowLPNNInfo.z * normal;                                              \
  vec4 pos = vec4(projWorldPos.xyz, shadowPos.w);                                                                           \
  if (pcf > 3.0) shadowAttenuation = CCGetShadowFactorX25(pos);                                                             \
  else if (pcf > 2.0) shadowAttenuation = CCGetShadowFactorX9(pos);                                                         \
  else if (pcf > 1.0) shadowAttenuation = CCGetShadowFactorX5(pos);                                                         \
  else shadowAttenuation = CCGetShadowFactorX1(pos);                                                                        \
  vec3 shadowColor = cc_shadowColor.rgb * cc_shadowColor.a + finalColor.rgb * (1.0 - cc_shadowColor.a);                     \
  if (cc_shadowNFLSInfo.w > 0.000001) {                                                                                     \
    finalColor.rgb = shadowColor.rgb * shadowAttenuation + finalColor.rgb * (1.0 - shadowAttenuation);                      \
  } else {                                                                                                                  \
    finalColor.rgb = shadowColor.rgb * shadowAttenuation * atten + finalColor.rgb * (1.0 - shadowAttenuation * atten);      \
  }                                                                                                                         \
}                                                                                                                           \
#pragma // empty pragma trick to get rid of trailing semicolons at effect compile time

#define CC_TRANSFER_SHADOW_BASE(pos, shadowPos) \
shadowPos = cc_matLightViewProj * pos
